{"title":"LinuxKernel-4","date":"2021-05-30T02:57:12.000Z","date_formatted":{"ll":"2021年5月30日","L":"2021/05/30","MM-DD":"05-30"},"link":"2021/05/30/LinuxKernel-4","tags":["Linux"],"updated":"2021-07-18T23:47:44.687Z","content":"<h1 id=\"8086系统寄存器和系统指令\">8086系统寄存器和系统指令<a title=\"#8086系统寄存器和系统指令\" href=\"#8086系统寄存器和系统指令\"></a></h1>\n<ul>\n<li>标志寄存器<br>\n<img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-05-30%20at%2016.15.15.png\" alt=\"Screen Shot 2021-05-30 at 16.15.15\"></li>\n</ul>\n<p>一共32位</p>\n<ul>\n<li>内存管理寄存器</li>\n</ul>\n<p>一共有四个：GDTR、LDTR、IDTR和TR，都是段基址寄存器</p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-05-30%20at%2016.22.33.png\" alt=\"Screen Shot 2021-05-30 at 16.22.33\" class=\"φbs\"></p>\n<p><em>GDTR</em>：全局描述符表寄存器。指令LGDT和SGDT分别用于加载在和保存GDTR寄存器的内容。</p>\n<p><em>IDTR</em>：中断描述表寄存器。指令LIDT和SIDT分别用于加载和保存IDTR寄存器的内容。</p>\n<p><em>LDTR</em>：局部描述符表寄存器。指令LLDT和SLDT分别用于加载和保存LDTR寄存器的段描述符部分。</p>\n<p><em>TR</em>：任务寄存器。LTR和STR分别用于加载和保存TR寄存器的段选择符部分。</p>\n<ul>\n<li>控制寄存器</li>\n</ul>\n<p>一共有四个：CR0、CR1、CR2、CR3</p>\n<p>用于<strong>控制和确定处理的操作模式以及当前执行任务的特性</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-05-30%20at%2016.33.52.png\" alt=\"Screen Shot 2021-05-30 at 16.33.52\" class=\"φbs\"></p>\n<p>DNA异常：Devices Not Available</p>\n<p><strong>CR0:</strong> <em>协处理控制位、保护控制位</em></p>\n<p>PE用于控制分段机制，PG用于控制分页机制</p>\n<p>系统刚上电时，处理器将被复位成PE=0和PG=0（实模式状态），以允许引导代码在启用分段和分页机制之前能够初始化这些寄存器和数据结构。</p>\n<p><strong>CR2和CR3</strong>：用于分页机制，CR3含有存放页目录表页面的物理地址，被称为<strong>PDBR</strong>，只有高20位有效，低12位保留给更高级处理器使用。CR2用于出现页异常时报告出错信息。</p>\n<ul>\n<li>内存寻址</li>\n</ul>\n<p>8086CPU是先存小值的处理器</p>\n<p>使用了段（Segment）的寻址技术，将内存空间分成一个或多个称为段的线性区域。针对一个数据对象，需要一个<strong>段的起始地址（段地址）<strong>和一个</strong>段内偏移地址</strong>两部分组成。段地址部分用16位的段选择符来制定，其中14位可以选择2^14 =16384个段；偏移地址使用32位值来指定，一共48位，称为逻辑地址（虚拟地址）或者长指针。</p>\n<p><strong>仅由32位偏移地址或指针指定的地址是基于当前段的对象地址</strong></p>\n<p>8086提供了6个存放段选择符的段寄存器：CS、DS、ES、SS、FS和GS。<strong>CS</strong>总是用于寻址代码段，堆栈段专门使用<strong>SS</strong>段寄存器</p>\n<p>要执行指令的地址是CS:[EIP]</p>\n<p>堆栈顶地址是SS:[ESP]</p>\n<p>另外四个是通用段寄存器，DS是数据段寄存器。</p>\n<p><strong>指令寻址方式</strong>：偏移地址 = 基地址 + （变址* 比例因子）+偏移量</p>\n<p>8086从逻辑地址到物理地址的变换采用了<strong>分段和分页两种机制。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-06-05%20at%2020.41.35.png\" alt=\"Screen Shot 2021-06-05 at 20.41.35\" class=\"φbs\"></p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-06-05%20at%2020.45.40.png\" alt=\"Screen Shot 2021-06-05 at 20.45.40\" class=\"φbs\"></p>\n<p><strong>保护</strong></p>\n<ul>\n<li>通过给每个任务不同的虚拟地址（逻辑地址）空间来完全隔离各个任务</li>\n</ul>\n<p>全局地址空间和局部地址空间</p>\n<ul>\n<li>对任务进行操作，以保护操作系统内存段和处理器特殊系统寄存器不被应用程序访问</li>\n</ul>\n<p>特权级有4个，从0-3，0具有最高等级，3是最低等级</p>\n<p>每个内存段都有一个特权级相关联</p>\n<p><strong>不同任务使用GDT和LDT的情况</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.16.58.png\" alt=\"Screen Shot 2021-07-16 at 10.16.58\" class=\"φbs\"></p>\n<p>段选择符的结构：16位标识符</p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.21.09.png\" alt=\"Screen Shot 2021-07-16 at 10.21.09\" class=\"φbs\"></p>\n<p>空选择符：加载到段寄存器（除CS和SS外）不会产生异常，使用空选择符访问内存会产生异常</p>\n<p>处理器最多提供可存放最多六个选择符的寄存器：</p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.26.59.png\" alt=\"Screen Shot 2021-07-16 at 10.26.59\" class=\"φbs\"></p>\n<p>段描述符：</p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.30.48.png\" alt=\"Screen Shot 2021-07-16 at 10.30.48\" class=\"φbs\"></p>\n<p>数据段、代码段、系统段描述符：</p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.47.20.png\" alt=\"Screen Shot 2021-07-16 at 10.47.20\" class=\"φbs\"></p>\n<p><img src=\"https://raw.githubusercontent.com/lumosmax7/pics/main/uPic/Screen%20Shot%202021-07-16%20at%2010.47.03.png\" alt=\"Screen Shot 2021-07-16 at 10.46.50\" class=\"φbs\"></p>\n<p><strong>一致代码段</strong>：</p>\n<p>简单理解，就是操作系统拿出来被共享的代码段,可以被低特权级的用户直接调用访问的代码.</p>\n<p>通常这些共享代码，是&quot;不访问&quot;受保护的资源和某些类型异常处理。比如一些数学计算函数库,为纯粹的数学运算计算,</p>\n<p>被作为一致代码段.</p>\n<p>特权高的程序不能访问特权低的数据</p>\n<p>特权低的程序可以访问特权高的数据</p>\n<p><strong>非一致代码段</strong>：</p>\n<p>为了避免低特权级的访问而被操作系统保护起来的系统代码.</p>\n<p>只允许同级别访问</p>\n","next":{"title":"常用矩阵求导","link":"2021/05/26/常用矩阵求导"},"plink":"http://example.com/2021/05/30/LinuxKernel-4/","toc":[{"id":"8086系统寄存器和系统指令","title":"8086系统寄存器和系统指令","index":"1"}]}