{"title":"GitTutorial","date":"2021-03-13T13:42:29.000Z","date_formatted":{"ll":"2021年3月13日","L":"2021/03/13","MM-DD":"03-13"},"link":"2021/03/13/GitTutorial","updated":"2021-03-13T14:03:32.949Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>之前做毕业设计也用过Github的vs，但是一直没有系统的把Git弄明白，今天去廖大佬的博客上系统学习了一下，搞个小小的总结。</p>\n<h1 id=\"介绍\">介绍<a title=\"#介绍\" href=\"#介绍\"></a></h1>\n<p>Git是由linux的开发者采用C语言写的一个分布式版本控制系统，我们现在所常用的Github为许多开源项目提供Git存储。 相比于集中式版本控制系统，分布式版本控制采用了<strong>去中心</strong>的思想，即没有一个中央服务器，而是在每个电脑上都有一个完整的版本库。这样做的好处是，提高了整个系统的安全性，即如任何一个人的电脑坏掉，可以从其他人获取完整的版本库。</p>\n<h1 id=\"quick-start\">Quick start<a title=\"#quick-start\" href=\"#quick-start\"></a></h1>\n<h2 id=\"安装\">安装<a title=\"#安装\" href=\"#安装\"></a></h2>\n<p>linux:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>mac: 两种方法，一是采用homebrew进行安装，二是直接安装xcode来进行git的安装 win： 去<a href=\"https://git-scm.com/downloads\" title=\"git官网\" target=\"_blank\">git官网</a>下载安装。</p>\n<h2 id=\"配置\">配置<a title=\"#配置\" href=\"#配置\"></a></h2>\n<p>安装完成后，在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name Your Name</span><br><span class=\"line\">git config --global user.email email@example.com</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：这里的<code>--global</code>是针对本台电脑的所有仓库进行配置的。</p>\n<h2 id=\"first-time\">First time<a title=\"#first-time\" href=\"#first-time\"></a></h2>\n<p>*后面采用的环境和代码均采用linux和unix，与win有一些不同，具体请谷歌。*首先创建一个空目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir learngit  &#x2F;&#x2F;创建目录</span><br><span class=\"line\">cd leangit &#x2F;&#x2F;进入文件夹</span><br><span class=\"line\">pwd &#x2F;&#x2F;显示当前目录</span><br></pre></td></tr></table></figure>\n<p>第二步，通过<code>git init</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">Initialized empty Git repository in &#x2F;Users&#x2F;michael&#x2F;learngit&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>\n<p>此时在目录下，将会多一个<code>.git</code>的目录，该目录是git用来跟踪管理版本库的，一般不要去修改。</p>\n<p><strong>为了方便写作，实在是不想中英文切换了，我直接采用英文书写</strong></p>\n<p>3rd, in the <code>/Users/michael/learngit</code>,write a <code>readme.txt</code> file, the content is</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is a version control system.</span><br><span class=\"line\">Git is free software.</span><br></pre></td></tr></table></figure>\n<p>4th, add the file to git by using :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt</span><br></pre></td></tr></table></figure>\n<p>Now, the file is added to git and the cmd line doesn’t show anything, meaning there isn’t any error.</p>\n<p>5th, commit the change to the repo by using :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure>\n<p>After that, we successfully commit the change to the local repo.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>\n<p>The<code>-m</code> is used to describe the change. In the regular using, the description is useful and we should write it clearly.</p>\n<p>Until now, we make <strong>one full git operation</strong>, and there is one thing we must pay attention to:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The git only track the modification.</span><br></pre></td></tr></table></figure>\n<h2 id=\"brief-summary\">Brief-summary<a title=\"#brief-summary\" href=\"#brief-summary\"></a></h2>\n<p>There are three main cmd in the git operation.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add filename</span><br><span class=\"line\">git commit -m &quot;description&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"the-main-core\">The main core<a title=\"#the-main-core\" href=\"#the-main-core\"></a></h1>\n<h2 id=\"only-track-the-content\">Only track the content<a title=\"#only-track-the-content\" href=\"#only-track-the-content\"></a></h2>\n<p>The most powerful thing of git is the vc. now, follow the above eg. In the <code>readme.txt</code>,we modified the content to :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software.</span><br></pre></td></tr></table></figure>\n<p>Now, using <code>git status</code>,we get the feedback like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use git add &lt;file&gt;... to update what will be committed)</span><br><span class=\"line\">  (use git checkout -- &lt;file&gt;... to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use git add and&#x2F;or git commit -a)&lt;&#x2F;file&gt;&lt;&#x2F;file&gt;</span><br></pre></td></tr></table></figure>\n<p>Now we know that <code>git status</code>can tell me which file is modified, but I don’t know how it is modified. on this occasion, we need <strong>another cmd</strong> :<code>git diff</code>.<code>git diff</code> will help us to compare the current file to the repo file and tell the differences, like this :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff readme.txt </span><br><span class=\"line\">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class=\"line\">index 46d49bf..9247db6 100644</span><br><span class=\"line\">--- a&#x2F;readme.txt</span><br><span class=\"line\">+++ b&#x2F;readme.txt</span><br><span class=\"line\">@@ -1,2 +1,2 @@</span><br><span class=\"line\">-Git is a version control system.</span><br><span class=\"line\">+Git is a distributed version control system.</span><br><span class=\"line\"> Git is free software.</span><br></pre></td></tr></table></figure>\n<p>Now we know the diffences and can add the file to the repo, the operation is the same.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt </span><br><span class=\"line\">git commit -m add distributed</span><br></pre></td></tr></table></figure>\n<p>After several times modification and commit,we can using<code>git log</code>to check the history,like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log </span><br><span class=\"line\">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) </span><br><span class=\"line\">Author: Michael Liao [askxuefeng@gmail.com](mailto:askxuefeng@gmail.com)</span><br><span class=\"line\">Date: Fri May 18 21:06:15 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">append GPL</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">commit e475afc93c209a690c39c13a46716e8fa000c366 </span><br><span class=\"line\">Author: Michael Liao [askxuefeng@gmail.com](mailto:askxuefeng@gmail.com)</span><br><span class=\"line\">Date: Fri May 18 21:03:36 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add distributed</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 </span><br><span class=\"line\">Author: Michael Liao [askxuefeng@gmail.com](mailto:askxuefeng@gmail.com)</span><br><span class=\"line\">Date: Fri May 18 20:59:18 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wrote a readme file</span><br></pre></td></tr></table></figure>\n<p>If we want to see this clearly, we can add<code>--pretty=oneline</code>,and the output will be displayed like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty&#x3D;oneline </span><br><span class=\"line\">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class=\"line\">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class=\"line\">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure>\n<p>Ahead of the description is the commit id , <strong>which we can use to track back to the given commit.</strong></p>\n<h2 id=\"time-travel\">Time-travel<a title=\"#time-travel\" href=\"#time-travel\"></a></h2>\n<p>In this section, we will introduce 2 parts, backward and forward.</p>\n<ol>\n<li><strong>intro:head</strong> <code>HEAD</code>means the current version, the last version is <code>HEAD^</code>, and we can use many <code>^</code> to back previous version. In case, we can use<code>HEAD~100</code>to get the forward 100 version. <code>HEAD</code> is a point,which points the latest version,by using the feature, we can go time-traveling.</li>\n<li><strong>Forward and Backward</strong> By using: <code>git reset \\--hard HEAD^</code> we can get the last version. And if we want to get back to the latest version, we can use: <code>git reset \\--hard 1094a</code>. The 1094a is the latest version’s commit id,and it doesn’t need the full length, just a little to tell the differences between versions. If you don’t know the commit id, we can use the <code>git reflog</code> to check the history of using cmd.</li>\n<li><strong>The core</strong> There are 2 important conceptions, working directory and repository. Working directory is the catalogue we can see in the pc, the repo is hidden in the working dir,like this. <img src=\"https://www.liaoxuefeng.com/files/attachments/919020037470528/0\" alt=\"\"></li>\n<li><strong>Delete</strong> By using: <code>git checkout \\-- filename</code> You can delete the last modification in the stage. If you delete a file in the working dir, there are 2 options.</li>\n</ol>\n<ul>\n<li>you indeed want to delete it,you can use:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm filename</span><br><span class=\"line\">git commit -m &quot;description&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>you carelessly delete the file and you want it back, you can use:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --filename</span><br></pre></td></tr></table></figure>\n<h1 id=\"co-working\">Co-working<a title=\"#co-working\" href=\"#co-working\"></a></h1>\n<p>Through Github, the team member can co-work with each other. There are some important conceptions.</p>\n<h2 id=\"branch\">Branch<a title=\"#branch\" href=\"#branch\"></a></h2>\n<p>In the git cmd lines, we often see <code>master</code>, which is the main branch of project. Branch is like the timeline.<code>master</code>is like<code>HEAD</code>, a point. <code>HEAD</code> points <code>master</code> and <code>master</code> points the latest commit. <img src=\"https://www.liaoxuefeng.com/files/attachments/919022325462368/0\" alt=\"\"> Every commit, master move forward. When we create a new branch named<code>dev</code>,git make the <code>HEAD</code> point to the <code>dev</code>, and <code>dev</code> commits make the <code>dev</code> branch move forward. <img src=\"https://www.liaoxuefeng.com/files/attachments/919022387118368/l\" alt=\"\"> When we finish the work in <code>dev</code>, we can combine the <code>master</code> and <code>dev</code>. <img src=\"https://www.liaoxuefeng.com/files/attachments/919022412005504/0\" alt=\"\"> Here comes the cmd.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev &#x2F;&#x2F;it means create the branch and switch to it.</span><br></pre></td></tr></table></figure>\n<p>This cmd equals the following cmds, in the lasters version of git, in order not to make confusion, we use <code>git switch \\-c dev</code> to reach the same.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n<p>We can use this cmd to see the current branch in this project.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<p>Now, we switch to the <code>dev</code>, modified the <code>readme.txt</code>, and commit.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -b dev</span><br><span class=\"line\">git add readme.txt</span><br><span class=\"line\">git commit -m &quot;branch</span><br></pre></td></tr></table></figure>\n<p>When we finish the work of <code>dev</code> and want to <strong>combine the current work.</strong> Use</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n<p>It means, combine the practical branch into the current. Now we can delete the <code>dev</code> branch. Use</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n<p>If the branch you have not commit ever, using</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D dev</span><br></pre></td></tr></table></figure>\n<p>to delete, <code>-D</code> means force the delete.</p>\n<h2 id=\"problems\">Problems<a title=\"#problems\" href=\"#problems\"></a></h2>\n<p>In case, <code>merge</code> may cause conflicts. For example, if we commit both in <code>master</code> and <code>dev</code>, when we use <code>git merge dev</code>, git will remind us that there is conflicts. We can use <code>git status</code> to reach the conflicts file and modified, the contents will be like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software distributed under the GPL.</span><br><span class=\"line\">Git has a mutable index called stage.</span><br><span class=\"line\">Git tracks changes of files.</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">Creating a new branch is quick &amp; simple.</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">Creating a new branch is quick AND simple.</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>\n<p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>,<code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>can help us locate the conflicts. After the conflicts, we can use :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n<p>to see the commit and merge tree, like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| * 14096d0 (feature1) AND simple</span><br><span class=\"line\">* | 5dc6824 &amp; simple</span><br><span class=\"line\">|&#x2F;  </span><br><span class=\"line\">* b17d20e branch test</span><br><span class=\"line\">* d46f35e (origin&#x2F;master) remove test.txt</span><br><span class=\"line\">* b84166e add test.txt</span><br><span class=\"line\">* 519219b git tracks changes</span><br><span class=\"line\">* e43a48b understand how stage works</span><br><span class=\"line\">* 1094adb append GPL</span><br><span class=\"line\">* e475afc add distributed</span><br><span class=\"line\">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>\n<p>Except the conflicts, when we use <code>git merge</code>, the default setting <code>Fast forward</code>, the shortcoming is when we delete the branch we will <strong>lost the data of the commit in the branch.</strong> So we can <strong>force</strong> not to use <code>Fast forward</code>, git will create a commit when we <code>merge</code>. Use:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"make-a-photo\">Make a photo<a title=\"#make-a-photo\" href=\"#make-a-photo\"></a></h2>\n<p>Think of a situation, you are workin at <code>dev</code> and didn’t commit any change, there is a bug in the <code>master</code>. How to save the work on <code>dev</code>, just make a photo by using :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n<p>Git will save the working and hide them. Now we can switch to <code>master</code> to debug. After finishing that, switch<code>dev</code>, recover our work. There are 2 ways to recover.</p>\n<ul>\n<li>\n<p><code>git stash apply</code>, this cmd don’t delete the content of <code>stash</code>, you need <code>git stash drop</code> to delete.</p>\n</li>\n<li>\n<p>git stash pop, this cmd will recover and <strong>delete the content of <code>stash</code></strong></p>\n</li>\n</ul>\n<p>If you want to recover several times, use <code>git stash list</code> to check which one you want to recover, and use <code>git stash apple stash@&#123;0&#125;</code> to recover the practical one.</p>\n<p>Particularly, if the bug is in the early of <code>master</code>, and it exits in the <code>dev</code> you’re woking on. How to fix the same bug? By using <code>cherry-pick</code>. It can copy the practical commit to the current branch.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick 4c805e2</span><br></pre></td></tr></table></figure>\n<p><code>4c805e2</code>is the commit id when you fix the bug in the <code>master</code>.</p>\n<h2 id=\"pull-and-push\">Pull and push<a title=\"#pull-and-push\" href=\"#pull-and-push\"></a></h2>\n<p>How to get the data of remote? Use <code>git remote</code> or <code>git remote \\-v</code> to get the detail information. As we said before, <code>origin</code> is the default name of remote repo, so when we want to push the local commits to the remote, using:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>where,<code>master</code> is the branch you want to push to. When you are co-working and your mate commits before you, there will be error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">To github.com:michaelliao&#x2F;learngit.git</span><br><span class=\"line\"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &#39;git@github.com:michaelliao&#x2F;learngit.git&#39;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class=\"line\">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure>\n<p>As it said, we should use <code>git pull</code> to get the newest commits, merge locally and fix the conflicts. When you try to pull, you still get the error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to&#x3D;origin&#x2F;&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>\n<p>That’s because you don’t connect the local <code>dev</code>to <code>origin/dev</code>. Use:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"rebase\">Rebase<a title=\"#rebase\" href=\"#rebase\"></a></h2>\n<p>According to the last chapter, if several persons works on the same project, the conflicts often show off. Even there isn’t any conflicts, the last pushing person must pull first to make it success, and the history will be like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class=\"line\">* d1be385 (HEAD -&gt; master, origin&#x2F;master) init hello</span><br><span class=\"line\">*   e5e69f1 Merge branch &#39;dev&#39;</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| *   57c53ab (origin&#x2F;dev, dev) fix env conflict</span><br><span class=\"line\">| |\\  </span><br><span class=\"line\">| | * 7a5e5dd add env</span><br><span class=\"line\">| * | 7bd91f1 add new env</span><br><span class=\"line\">| |&#x2F;  </span><br><span class=\"line\">* |   12a631b merged bug fix 101</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| * | 4c805e2 fix bug 101</span><br><span class=\"line\">|&#x2F; &#x2F;  </span><br><span class=\"line\">* |   e1e9c68 merge with no-ff</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| |&#x2F;  </span><br><span class=\"line\">| * f52c633 add merge</span><br><span class=\"line\">|&#x2F;  </span><br><span class=\"line\">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure>\n<p>look like a mass. How to make it better, using:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase</span><br></pre></td></tr></table></figure>\n<p><code>rebase</code> can make the last local commits based on the latest version of remote repo. The advantage of it is it make the <em>history</em> become a line, but the disadvantage is the local commit isn’t based on the previous version.</p>\n<h2 id=\"tag\">Tag<a title=\"#tag\" href=\"#tag\"></a></h2>\n<p>The commit id is complicated, so how to turn it into version number? Using :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure>\n<p>You can also use<code>git tag</code> to see the all tags. How to tag the previous commits? By using this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v0.9 f52c633</span><br></pre></td></tr></table></figure>\n<p>The <code>f52c633</code>is the commit id , you can check it on the <code>git log</code>. Use <code>git show &lt;tagname&gt;</code> to check the tag info:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show v0.9</span><br><span class=\"line\">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add merge</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br></pre></td></tr></table></figure>\n<p>Moreover,we can use:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure>\n<p><code>-a</code> means the tagname, <code>-m</code> means the description. <strong>ATTENTION</strong>, the tag is connected to the commit. If it exists both in <code>master</code> and <code>dev</code>, we can see the tag in both places. Also, we can use <code>git tag \\-d v0.1</code> to delete it. Same as the commits, tag also needs pushing. Use</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin v1.0</span><br></pre></td></tr></table></figure>\n<p>or push all tags:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n<p>If you want to delete a tag in the remote repo, you must firstly delete it locally and push it to the remote repo, like this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v0.9</span><br><span class=\"line\">git push origin :refs&#x2F;tags&#x2F;v0.9</span><br></pre></td></tr></table></figure>\n<h2 id=\"pr\">PR<a title=\"#pr\" href=\"#pr\"></a></h2>\n<p>PR means pull request. If you want in involve a open source project, firstly you fork the project, then clone the whole project and contribute to the code locally, and finally push to the remote repo, <strong>ATTENTION the remote repo is the one belong to your own when you fork the github created</strong>. Now you can have a pull request on the original repo, and wait the open source team accept your work.</p>\n<h1 id=\"finally\">Finally<a title=\"#finally\" href=\"#finally\"></a></h1>\n<p>It took me 3 days to write the whole series of git-tutorial. Git is a very useful tool.</p>\n","prev":{"title":"当越是低谷的时候，越是应该相信未来","link":"2021/03/13/当越是低谷的时候，越是应该相信未来"},"next":{"title":"Hello World","link":"2021/03/13/hello-world"},"plink":"http://example.com/2021/03/13/GitTutorial/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"介绍","title":"介绍","index":"2"},{"id":"quick-start","title":"Quick start","index":"3","children":[{"id":"安装","title":"安装","index":"3.1"},{"id":"配置","title":"配置","index":"3.2"},{"id":"first-time","title":"First time","index":"3.3"},{"id":"brief-summary","title":"Brief-summary","index":"3.4"}]},{"id":"the-main-core","title":"The main core","index":"4","children":[{"id":"only-track-the-content","title":"Only track the content","index":"4.1"},{"id":"time-travel","title":"Time-travel","index":"4.2"}]},{"id":"co-working","title":"Co-working","index":"5","children":[{"id":"branch","title":"Branch","index":"5.1"},{"id":"problems","title":"Problems","index":"5.2"},{"id":"make-a-photo","title":"Make a photo","index":"5.3"},{"id":"pull-and-push","title":"Pull and push","index":"5.4"},{"id":"rebase","title":"Rebase","index":"5.5"},{"id":"tag","title":"Tag","index":"5.6"},{"id":"pr","title":"PR","index":"5.7"}]},{"id":"finally","title":"Finally","index":"6"}]}